(function(){"use strict";var n={9469:function(n,e,t){t.d(e,{AM:function(){return c},E5:function(){return i},Eg:function(){return m},I2:function(){return d},MX:function(){return g},QV:function(){return s},Qv:function(){return h},R4:function(){return b},UO:function(){return p},Us:function(){return f},VT:function(){return y},Yg:function(){return o},Zf:function(){return a},cZ:function(){return l},pP:function(){return u}});var r=t(3918);const s=({username:n,password:e,repassword:t})=>(0,r.Z)({url:"/api/reg",method:"post",data:{username:n,password:e,repassword:t}}),p=({username:n,password:e})=>(0,r.Z)({url:"/api/login",method:"post",data:{username:n,password:e}}),a=({token:n})=>(0,r.Z)({url:"/my/userinfo",method:"patch",data:{token:n}}),o=()=>(0,r.Z)({url:"/my/menus"}),l=({id:n,email:e,nickname:t,user_pic:s,username:p})=>(0,r.Z)({url:"/my/userinfo",method:"post",data:{id:n,email:e,nickname:t,user_pic:s,username:p}}),i=({avatar:n,token:e})=>(0,r.Z)({url:"/my/update/avatar",method:"patch",data:{avatar:n,token:e}}),c=({token:n,old_pwd:e,new_pwd:t,re_pwd:s})=>(0,r.Z)({url:"/my/updatepwd",method:"post",data:{token:n,old_pwd:e,new_pwd:t,re_pwd:s}}),d=()=>(0,r.Z)({url:"/my/cate/list"}),u=({cate_name:n,cate_alias:e})=>(0,r.Z)({url:"/my/cate/add",method:"POST",data:{cate_name:n,cate_alias:e}}),b=({id:n,cate_name:e,cate_alias:t})=>(0,r.Z)({url:"/my/cate/info",method:"put",data:{id:n,cate_name:e,cate_alias:t}}),g=n=>(0,r.Z)({url:"/my/cate/del",method:"DELETE",data:{id:n}}),m=n=>(0,r.Z)({url:"/my/article/add",method:"post",data:n}),f=({pagenum:n,pagesize:e,cate_id:t,state:s})=>(0,r.Z)({url:"/my/article/list",method:"post",data:{pagenum:n,pagesize:e,cate_id:t,state:s}}),h=n=>(0,r.Z)({url:"/my/article/info",data:{id:n}}),y=n=>(0,r.Z)({url:"/my/article/info",method:"delete",data:{id:n}})},9027:function(n,e,t){var r=t(1508),s=function(){var n=this,e=n._self._c;return e("router-view")},p=[],a={name:"App"},o=a,l=t(2242),i=(0,l.Z)(o,s,p,!1,null,"14fdfbe3",null),c=i.exports,d=t(510),u=t(5011),b=(t(3705),t(674)),g=t.n(b),m=JSON.parse('[{"id":7534,"title":"vue3组件通信方式","content":"<pre class=\\"ql-syntax\\" spellcheck=\\"false\\">title: vue3组件通信汇总\\r\\ncategory: 前端学习\\r\\nabbrlink: 36717\\r\\ndate: 2023-05-22 20:35:18\\r\\n</pre><h2>vue3组件通信方式</h2><p><strong>比如:vue2组件通信方式</strong></p><p><strong>props:</strong>可以实现父子组件、子父组件、甚至兄弟组件通信</p><p><strong>自定义事件</strong>:可以实现子父组件通信</p><p><strong>全局事件总线$bus</strong>:可以实现任意组件通信</p><p><strong>pubsub:</strong>发布订阅模式实现任意组件通信</p><p><strong>vuex</strong>:集中式状态管理容器，实现任意组件通信</p><p><strong>ref</strong>:父组件获取子组件实例VC,获取子组件的响应式数据以及方法</p><p><strong>slot:</strong>插槽(默认插槽、具名插槽、作用域插槽)实现父子组件通信........</p><h3>1.1props</h3><p>props可以实现父子组件通信,在vue3中我们可以通过defineProps获取父组件传递的数据。且在组件内部不需要引入defineProps方法可以直接使用！</p><p><strong>父组件给子组件传递数据</strong></p><p>传递的值可以是动态数据也可以是静态数据</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Child info=\\"我爱祖国\\" :money=\\"money\\"&gt;&lt;/Child&gt;\\r\\n</pre><h5>ref:创建一个响应式的数据对象</h5><p>返回值是一个对象，且只包含一个 .value 属性。</p><p>在 setup() 函数内，由 ref() 创建的响应式数据返回的是对象，所以需要用 .value 来访问。</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">import { ref } from \\"vue\\";\\r\\nlet money = ref(10000);\\r\\n</pre><p><strong>子组件获取父组件传递数据:方式1</strong></p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">let props = defineProps({\\r\\n info:{\\r\\n&nbsp;type:String,//接受的数据类型\\r\\n&nbsp;default:\'默认参数\',//接受默认数据\\r\\n },\\r\\n money:{\\r\\n&nbsp;type:Number,\\r\\n&nbsp;default:0\\r\\n}})\\r\\n</pre><p><strong>子组件获取父组件传递数据:方式2</strong></p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">let props = defineProps([\\"info\\",\'money\']);\\r\\n</pre><p><u>子组件获取到props数据就可以在模板中使用了,但是切记props是只读的(只能读取，不能修改)</u></p><h3>1.2自定义事件</h3><p>在vue框架中事件分为两种:一种是原生的DOM事件，另外一种自定义事件。</p><p>原生DOM事件可以让用户与网页进行交互，比如click、dbclick、change、mouseenter、mouseleave....</p><p>自定义事件可以实现子组件给父组件传递数据</p><h4>1.2.1原生DOM事件</h4><p>代码如下:</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\"> &lt;pre @click=\\"handler\\"&gt;\\r\\n&nbsp;&nbsp;我是祖国的老花骨朵\\r\\n &lt;/pre&gt;\\r\\n</pre><p>当前代码级给pre标签绑定原生DOM事件点击事件,默认会给事件回调注入event事件对象。当然点击事件想注入多个参数可以按照下图操作。但是切记注入的事件对象务必叫做$event.</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\"> &lt;div @click=\\"handler1(1,2,3,$event)\\"&gt;我要传递多个参数&lt;/div&gt;\\r\\n</pre><p>在vue3框架click、dbclick、change(这类原生DOM事件),不管是在标签、自定义标签上(组件标签)都是原生DOM事件。</p><p><strong style=\\"color: rgb(162, 127, 3);\\">&lt;!--vue2中却不是这样的,在vue2中组件标签需要通过native修饰符才能变为原生DOM事件--&gt;</strong></p><h4>1.2.2自定义事件</h4><p>自定义事件可以实现子组件给父组件传递数据.在项目中是比较常用的。</p><p>比如在父组件内部给子组件(Event2)绑定一个自定义事件</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Event2 @xxx=\\"handler3\\"&gt;&lt;/Event2&gt;\\r\\n</pre><p>在Event2子组件内部触发这个自定义事件</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n&nbsp;&lt;div&gt;\\r\\n&nbsp;&nbsp;&lt;h1&gt;我是子组件2&lt;/h1&gt;\\r\\n&nbsp;&nbsp;&lt;button @click=\\"handler\\"&gt;点击我触发xxx自定义事件&lt;/button&gt;\\r\\n&nbsp;&lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n​\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nlet $emit = defineEmits([\\"xxx\\"]);\\r\\nconst handler = () =&gt; {\\r\\n&nbsp;$emit(\\"xxx\\", \\"法拉利\\", \\"茅台\\");\\r\\n};\\r\\n&lt;/script&gt;\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p>我们会发现在script标签内部,使用了defineEmits方法，此方法是vue3提供的方法,不需要引入直接使用。defineEmits方法执行，传递一个数组，数组元素即为将来组件需要触发的自定义事件类型，此方执行会返回一个$emit方法用于触发自定义事件。</p><p>当点击按钮的时候，事件回调内部调用$emit方法去触发自定义事件,第一个参数为触发事件类型，第二个、三个、N个参数即为传递给父组件的数据。</p><p>需要注意的是:代码如下</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Event2  @xxx=\\"handler3\\" @click=\\"handler\\"&gt;&lt;/Event2&gt;\\r\\n</pre><p>正常说组件标签书写@click应该为原生DOM事件,但是如果子组件内部通过defineEmits定义就变为自定义事件了</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">let $emit = defineEmits([\\"xxx\\",\'click\']);\\r\\n</pre><h3>1.3全局事件总线</h3><p>全局事件总线可以实现任意组件通信，在vue2中可以根据VM与VC关系推出全局事件总线。</p><p>但是在vue3中没有Vue构造函数，也就没有Vue.prototype.以及组合式API写法没有this，</p><p>那么在Vue3想实现全局事件的总线功能就有点不现实啦，如果想在Vue3中使用全局事件总线功能</p><p>可以使用插件mitt实现。</p><p><strong>mitt:官网地址:</strong><a href=\\"https://www.npmjs.com/package/mitt\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\" style=\\"color: rgb(65, 131, 196);\\"><strong>https://www.npmjs.com/package/mitt</strong></a></p><p>bus的定义如下：</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//引入mitt插件:mitt一个方法,方法执行会返回bus对象\\r\\nimport mitt from \'mitt\';\\r\\nconst $bus = mitt();\\r\\nexport default $bus;\\r\\n</pre><p>例如child1.vue</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div class=\\"child1\\"&gt;\\r\\n    &lt;h3&gt;我是子组件1:曹植&lt;/h3&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport $bus from \\"../../bus\\";\\r\\n//组合式API函数\\r\\nimport { onMounted } from \\"vue\\";\\r\\n//组件挂载完毕的时候,当前组件绑定一个事件,接受将来兄弟组件传递的数据\\r\\nonMounted(() =&gt; {\\r\\n  //第一个参数:即为事件类型  第二个参数:即为事件回调\\r\\n  $bus.on(\\"car\\", (car) =&gt; {\\r\\n    console.log(car);\\r\\n  });\\r\\n});\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child1 {\\r\\n  width: 300px;\\r\\n  height: 300px;\\r\\n  background: hotpink;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><p>例如child2.vue</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div class=\\"child2\\"&gt;\\r\\n     &lt;h2&gt;我是子组件2:曹丕&lt;/h2&gt;\\r\\n     &lt;button @click=\\"handler\\"&gt;点击我给兄弟送一台法拉利&lt;/button&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\n//引入$bus对象\\r\\nimport $bus from \'../../bus\';\\r\\n//点击按钮回调\\r\\nconst handler = ()=&gt;{\\r\\n  $bus.emit(\'car\',{car:\\"法拉利\\"});\\r\\n}\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child2{\\r\\n  width: 300px;\\r\\n  height: 300px;\\r\\n  background: skyblue;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><h3>1.4v-model</h3><p>v-model指令可是收集表单数据(数据双向绑定)，除此之外它也可以实现父子组件数据同步。</p><p>而v-model实指利用props[modelValue]与自定义事件[update:modelValue]实现的。</p><p>下方代码:相当于给组件Child传递一个props(modelValue)与绑定一个自定义事件update:modelValue</p><p>实现父子组件数据同步</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Child v-model=\\"msg\\"&gt;&lt;/Child&gt;\\r\\n</pre><p>例如child.vue</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div class=\\"child\\"&gt;\\r\\n    &lt;h3&gt;钱数:{{ modelValue }}&lt;/h3&gt;\\r\\n    &lt;button @click=\\"handler\\"&gt;父子组件数据同步&lt;/button&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\n//接受props\\r\\nlet props = defineProps([\\"modelValue\\"]);\\r\\nlet $emit = defineEmits([\'update:modelValue\']);\\r\\n//子组件内部按钮的点击回调\\r\\nconst handler = ()=&gt;{\\r\\n   //触发自定义事件\\r\\n   $emit(\'update:modelValue\',props.modelValue+1000);\\r\\n}\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child {\\r\\n  width: 600px;\\r\\n  height: 300px;\\r\\n  background: skyblue;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><p>在vue3中一个组件可以通过使用多个v-model,让父子组件多个数据同步,下方代码相当于给组件Child传递两个props分别是pageNo与pageSize，以及绑定两个自定义事件update:pageNo与update:pageSize实现父子数据同步</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Child v-model:pageNo=\\"msg\\" v-model:pageSize=\\"msg1\\"&gt;&lt;/Child&gt;\\r\\n&lt;template&gt;\\r\\n  &lt;div class=\\"child2\\"&gt;\\r\\n    &lt;h1&gt;同时绑定多个v-model&lt;/h1&gt;\\r\\n    &lt;button @click=\\"handler\\"&gt;pageNo{{ pageNo }}&lt;/button&gt;\\r\\n    &lt;button @click=\\"$emit(\'update:pageSize\', pageSize + 4)\\"&gt;\\r\\n      pageSize{{ pageSize }}\\r\\n    &lt;/button&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nlet props = defineProps([\\"pageNo\\", \\"pageSize\\"]);\\r\\nlet $emit = defineEmits([\\"update:pageNo\\", \\"update:pageSize\\"]);\\r\\n//第一个按钮的事件回调\\r\\nconst handler = () =&gt; {\\r\\n  $emit(\\"update:pageNo\\", props.pageNo + 3);\\r\\n};\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child2 {\\r\\n  width: 300px;\\r\\n  height: 300px;\\r\\n  background: hotpink;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;v-model:钱数{{ money }}{{pageNo}}{{pageSize}}&lt;/h1&gt;\\r\\n    &lt;input type=\\"text\\" v-model=\\"info\\" /&gt;\\r\\n    &lt;hr /&gt;\\r\\n    &lt;!-- props:父亲给儿子数据 --&gt;\\r\\n    &lt;!-- &lt;Child :modelValue=\\"money\\" @update:modelValue=\\"handler\\"&gt;&lt;/Child&gt; --&gt;\\r\\n    &lt;!-- \\r\\n       v-model组件身上使用\\r\\n       第一:相当有给子组件传递props[modelValue] = 10000\\r\\n       第二:相当于给子组件绑定自定义事件update:modelValue\\r\\n     --&gt;\\r\\n    &lt;Child v-model=\\"money\\"&gt;&lt;/Child&gt;\\r\\n    &lt;hr /&gt;\\r\\n    &lt;Child1 v-model:pageNo=\\"pageNo\\" v-model:pageSize=\\"pageSize\\"&gt;&lt;/Child1&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\n//v-model指令:收集表单数据,数据双向绑定\\r\\n//v-model也可以实现组件之间的通信,实现父子组件数据同步的业务\\r\\n//父亲给子组件数据 props\\r\\n//子组件给父组件数据 自定义事件\\r\\n//引入子组件\\r\\nimport Child from \\"./Child.vue\\";\\r\\nimport Child1 from \\"./Child1.vue\\";\\r\\nimport { ref } from \\"vue\\";\\r\\nlet info = ref(\\"\\");\\r\\n//父组件的数据钱数\\r\\nlet money = ref(10000);\\r\\n//自定义事件的回调\\r\\nconst handler = (num) =&gt; {\\r\\n  //将来接受子组件传递过来的数据\\r\\n  money.value = num;\\r\\n};\\r\\n\\r\\n//父亲的数据\\r\\nlet pageNo = ref(1);\\r\\nlet pageSize = ref(3);\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><h3>1.5useAttrs</h3><p>在Vue3中可以利用useAttrs方法获取组件的属性与事件(包含:原生DOM事件或者自定义事件),次函数功能类似于Vue2框架中$attrs属性与$listeners方法。</p><p>比如:在父组件内部使用一个子组件my-button</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;my-button type=\\"success\\" size=\\"small\\" title=\'标题\' @click=\\"handler\\"&gt;&lt;/my-button&gt;\\r\\n</pre><p>子组件内部可以通过useAttrs方法获取组件属性与事件.因此你也发现了，它类似于props,可以接受父组件传递过来的属性与属性值。需要注意如果defineProps接受了某一个属性，useAttrs方法返回的对象身上就没有相应属性与属性值。</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport {useAttrs} from \'vue\';\\r\\nlet $attrs = useAttrs();\\r\\n&lt;/script&gt;\\r\\n&lt;template&gt;\\r\\n  &lt;div :title=\\"title\\"&gt;\\r\\n     &lt;el-button :=\\"$attrs\\"&gt;&lt;/el-button&gt;   \\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n</pre><h3>1.6ref与$parent</h3><p>ref,提及到ref可能会想到它可以获取元素的DOM或者获取子组件实例的VC。既然可以在父组件内部通过ref获取子组件实例VC，那么子组件内部的方法与响应式数据父组件可以使用的。</p><p>比如:在父组件挂载完毕获取组件实例</p><p>父组件内部代码:</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;ref与$parent&lt;/h1&gt;\\r\\n    &lt;Son ref=\\"son\\"&gt;&lt;/Son&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport Son from \\"./Son.vue\\";\\r\\nimport { onMounted, ref } from \\"vue\\";\\r\\nconst son = ref();\\r\\nonMounted(() =&gt; {\\r\\n  console.log(son.value);\\r\\n});\\r\\n&lt;/script&gt;\\r\\n</pre><p>但是需要注意，如果想让父组件获取子组件的数据或者方法需要通过defineExpose对外暴露,因为vue3中组件内部的数据对外“关闭的”，外部不能访问</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport { ref } from \\"vue\\";\\r\\n//数据\\r\\nlet money = ref(1000);\\r\\n//方法\\r\\nconst handler = ()=&gt;{\\r\\n}\\r\\ndefineExpose({\\r\\n  money,\\r\\n   handler\\r\\n})\\r\\n&lt;/script&gt;\\r\\n</pre><p>$parent可以获取某一个组件的父组件实例VC,因此可以使用父组件内部的数据与方法。必须子组件内部拥有一个按钮点击时候获取父组件实例，当然父组件的数据与方法需要通过defineExpose方法对外暴露</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;button @click=\\"handler($parent)\\"&gt;点击我获取父组件实例&lt;/button&gt;\\r\\n</pre><h3>1.7provide与inject</h3><p><strong>provide[提供]</strong></p><p><strong>inject[注入]</strong></p><p>vue3提供两个方法provide与inject,可以实现隔辈组件传递参数</p><p>组件组件提供数据:</p><p>provide方法用于提供数据，此方法执需要传递两个参数,分别提供数据的key与提供数据value</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div class=\\"box\\"&gt;\\r\\n    &lt;h1&gt;Provide与Inject{{car}}&lt;/h1&gt;\\r\\n    &lt;hr /&gt;\\r\\n    &lt;Child&gt;&lt;/Child&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport Child from \\"./Child.vue\\";\\r\\n//vue3提供provide(提供)与inject(注入),可以实现隔辈组件传递数据\\r\\nimport { ref, provide } from \\"vue\\";\\r\\nlet car = ref(\\"法拉利\\");\\r\\n//祖先组件给后代组件提供数据\\r\\n//两个参数:第一个参数就是提供的数据key\\r\\n//第二个参数:祖先组件提供数据\\r\\nprovide(\\"TOKEN\\", car);\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.box {\\r\\n  width: 100vw;\\r\\n  height: 600px;\\r\\n  background: skyblue;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><p>后代组件可以通过inject方法获取数据,通过key获取存储的数值</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div class=\\"child1\\"&gt;\\r\\n    &lt;h1&gt;孙子组件&lt;/h1&gt;\\r\\n    &lt;p&gt;{{car}}&lt;/p&gt;\\r\\n    &lt;button @click=\\"updateCar\\"&gt;更新数据&lt;/button&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport {inject} from \'vue\';\\r\\n//注入祖先组件提供数据\\r\\n//需要参数:即为祖先提供数据的key\\r\\nlet car = inject(\'TOKEN\');\\r\\nconst updateCar = ()=&gt;{\\r\\n   car.value  = \'自行车\';\\r\\n}\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child1 {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background: red;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><h3>1.8pinia</h3><p><strong>pinia官网:</strong><a href=\\"https://pinia.web3doc.top/\\" rel=\\"noopener noreferrer\\" target=\\"_blank\\" style=\\"color: rgb(65, 131, 196);\\"><strong>https://pinia.web3doc.top/</strong></a></p><p>pinia也是集中式管理状态容器,类似于vuex。但是核心概念没有mutation、modules,使用方式参照官网</p><p>跟vuex类似</p><p>需要创建大仓库和小仓库</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//创建大仓库\\r\\nimport { createPinia } from \'pinia\';\\r\\n//createPinia方法可以用于创建大仓库\\r\\nlet store = createPinia();\\r\\n//对外暴露,安装仓库\\r\\nexport default store;\\r\\n//定义info小仓库\\r\\nimport { defineStore } from \\"pinia\\";\\r\\n//第一个仓库:小仓库名字  第二个参数:小仓库配置对象\\r\\n//defineStore方法执行会返回一个函数,函数作用就是让组件可以获取到仓库数据\\r\\nlet useInfoStore = defineStore(\\"info\\", {\\r\\n    //存储数据:state\\r\\n    state: () =&gt; {\\r\\n        return {\\r\\n            count: 99,\\r\\n            arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\\r\\n        }\\r\\n    },\\r\\n    actions: {\\r\\n        //注意:函数没有context上下文对象\\r\\n        //没有commit、没有mutations去修改数据\\r\\n        updateNum(a: number, b: number) {\\r\\n            this.count += a;\\r\\n        }\\r\\n    },\\r\\n    getters: {\\r\\n        total() {\\r\\n            let result:any = this.arr.reduce((prev: number, next: number) =&gt; {\\r\\n                return prev + next;\\r\\n            }, 0);\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n});\\r\\n//对外暴露方法\\r\\nexport default useInfoStore;\\r\\n&lt;template&gt;\\r\\n  &lt;div class=\\"child\\"&gt;\\r\\n    &lt;h1&gt;{{ infoStore.count }}---{{infoStore.total}}&lt;/h1&gt;\\r\\n    &lt;button @click=\\"updateCount\\"&gt;点击我修改仓库数据&lt;/button&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport useInfoStore from \\"../../store/modules/info\\";\\r\\n//获取小仓库对象\\r\\nlet infoStore = useInfoStore();\\r\\nconsole.log(infoStore);\\r\\n//修改数据方法\\r\\nconst updateCount = () =&gt; {\\r\\n  //仓库调用自身的方法去修改仓库的数据\\r\\n  infoStore.updateNum(66,77);\\r\\n};\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n.child {\\r\\n  width: 200px;\\r\\n  height: 200px;\\r\\n  background: yellowgreen;\\r\\n}\\r\\n&lt;/style&gt;\\r\\n</pre><p>定义组合式仓库</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//定义组合式API仓库\\r\\nimport { defineStore } from \\"pinia\\";\\r\\nimport { ref, computed,watch} from \'vue\';\\r\\n//创建小仓库\\r\\nlet useTodoStore = defineStore(\'todo\', () =&gt; {\\r\\n    let todos = ref([{ id: 1, title: \'吃饭\' }, { id: 2, title: \'睡觉\' }, { id: 3, title: \'打豆豆\' }]);\\r\\n    let arr = ref([1,2,3,4,5]);\\r\\n\\r\\n    const total = computed(() =&gt; {\\r\\n        return arr.value.reduce((prev, next) =&gt; {\\r\\n            return prev + next;\\r\\n        }, 0)\\r\\n    })\\r\\n    //务必要返回一个对象:属性与方法可以提供给组件使用\\r\\n    return {\\r\\n        todos,\\r\\n        arr,\\r\\n        total,\\r\\n        updateTodo() {\\r\\n            todos.value.push({ id: 4, title: \'组合式API方法\' });\\r\\n        }\\r\\n    }\\r\\n});\\r\\n\\r\\nexport default useTodoStore;\\r\\n</pre><h3>1.9slot</h3><p>插槽：默认插槽、具名插槽、作用域插槽可以实现父子组件通信.</p><p><strong>默认插槽:</strong></p><p>在子组件内部的模板中书写slot全局组件标签</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;slot&gt;&lt;/slot&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\n&lt;/script&gt;\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p>在父组件内部提供结构：Todo即为子组件,在父组件内部使用的时候，在双标签内部书写结构传递给子组件</p><p>注意开发项目的时候默认插槽一般只有一个</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;Todo&gt;\\r\\n  &lt;h1&gt;我是默认插槽填充的结构&lt;/h1&gt;\\r\\n&lt;/Todo&gt;\\r\\n</pre><p><strong>具名插槽：</strong></p><p>顾名思义，此插槽带有名字在组件内部留多个指定名字的插槽。</p><p>下面是一个子组件内部,模板中留两个插槽</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;todo&lt;/h1&gt;\\r\\n    &lt;slot name=\\"a\\"&gt;&lt;/slot&gt;\\r\\n    &lt;slot name=\\"b\\"&gt;&lt;/slot&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\n&lt;/script&gt;\\r\\n\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p>父组件内部向指定的具名插槽传递结构。需要注意v-slot：可以替换为#</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;slot&lt;/h1&gt;\\r\\n    &lt;Todo&gt;\\r\\n      &lt;template v-slot:a&gt;  //可以用#a替换\\r\\n        &lt;div&gt;填入组件A部分的结构&lt;/div&gt;\\r\\n      &lt;/template&gt;\\r\\n      &lt;template v-slot:b&gt;//可以用#b替换\\r\\n        &lt;div&gt;填入组件B部分的结构&lt;/div&gt;\\r\\n      &lt;/template&gt;\\r\\n    &lt;/Todo&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport Todo from \\"./Todo.vue\\";\\r\\n&lt;/script&gt;\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p><strong>作用域插槽</strong></p><p>作用域插槽：可以理解为，子组件数据由父组件提供，但是子组件内部决定不了自身结构与外观(样式)</p><p>子组件Todo代码如下:</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;todo&lt;/h1&gt;\\r\\n    &lt;ul&gt;\\r\\n     &lt;!--组件内部遍历数组--&gt;\\r\\n      &lt;li v-for=\\"(item,index) in todos\\" :key=\\"item.id\\"&gt;\\r\\n         &lt;!--作用域插槽将数据回传给父组件--&gt;\\r\\n         &lt;slot :$row=\\"item\\" :$index=\\"index\\"&gt;&lt;/slot&gt;\\r\\n      &lt;/li&gt;\\r\\n    &lt;/ul&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\ndefineProps([\'todos\']);//接受父组件传递过来的数据\\r\\n&lt;/script&gt;\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p>父组件内部代码如下:</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&lt;template&gt;\\r\\n  &lt;div&gt;\\r\\n    &lt;h1&gt;slot&lt;/h1&gt;\\r\\n    &lt;Todo :todos=\\"todos\\"&gt;\\r\\n      &lt;template v-slot=\\"{$row,$index}\\"&gt;\\r\\n         &lt;!--父组件决定子组件的结构与外观--&gt;\\r\\n         &lt;span :style=\\"{color:$row.done?\'green\':\'red\'}\\"&gt;{{$row.title}}&lt;/span&gt;\\r\\n      &lt;/template&gt;\\r\\n    &lt;/Todo&gt;\\r\\n  &lt;/div&gt;\\r\\n&lt;/template&gt;\\r\\n\\r\\n&lt;script setup lang=\\"ts\\"&gt;\\r\\nimport Todo from \\"./Todo.vue\\";\\r\\nimport { ref } from \\"vue\\";\\r\\n//父组件内部数据\\r\\nlet todos = ref([\\r\\n  { id: 1, title: \\"吃饭\\", done: true },\\r\\n  { id: 2, title: \\"睡觉\\", done: false },\\r\\n  { id: 3, title: \\"打豆豆\\", done: true },\\r\\n]);\\r\\n&lt;/script&gt;\\r\\n&lt;style scoped&gt;\\r\\n&lt;/style&gt;\\r\\n</pre><p><br></p>","cover_img":"../assets/logo.png","pub_date":"Thu Jul 13 2023 22:42:34 GMT+0800 (Coordinated Universal Time)","state":"已发布","cate_id":44889,"author_id":98077,"cate_name":"前端学习","username":"78798","nickname":""},{"id":7536,"title":"采用pinia登录总结","content":"<pre class=\\"ql-syntax\\" spellcheck=\\"false\\">title: 采用pinia登录总结\\r\\ncategory: 前端学习\\r\\nabbrlink: 22001\\r\\ndate: 2023-05-23 21:28:15\\r\\n</pre><h3>1、定义登录按钮响应事件</h3><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//登录按钮回调\\r\\nconst login = async () =&gt; {\\r\\n&nbsp;//保证全部表单相校验通过再发请求\\r\\n&nbsp;await loginForms.value.validate()\\r\\n&nbsp;//elemt-plus 中的加载效果:开始加载\\r\\n&nbsp;loading.value = true\\r\\n&nbsp;//点击登录按钮以后干什么?\\r\\n&nbsp;//通知仓库发登录请求\\r\\n&nbsp;//请求成功-&gt;首页展示数据的地方\\r\\n&nbsp;//请求失败-&gt;弹出登录失败信息\\r\\n&nbsp;try {\\r\\n&nbsp;&nbsp;//保证登录成功\\r\\n&nbsp;&nbsp;//useStore为pinia小仓库userLogin为其中的action函数\\r\\n&nbsp;&nbsp;await useStore.userLogin(loginForm)\\r\\n&nbsp;&nbsp;//编程式导航跳转到展示数据首页\\r\\n&nbsp;&nbsp;//判断登录的时候,路由路径当中是否有query参数，如果有就往query参数挑战，没有跳转到首页\\r\\n&nbsp;&nbsp;let redirect: any = $route.query.redirect\\r\\n&nbsp;&nbsp;$router.push({ path: redirect || \'/\' })\\r\\n&nbsp;&nbsp;//登录成功提示信息 import { ElNotification } from \'element-plus\' 里面的提示框\\r\\n&nbsp;&nbsp;ElNotification({\\r\\n&nbsp;&nbsp;&nbsp;type: \'success\',\\r\\n&nbsp;&nbsp;&nbsp;message: \'欢迎回来\',\\r\\n&nbsp;&nbsp;&nbsp;title: `HI,${getTime()}好`,// 自定义的getTime函数\\r\\n&nbsp;})\\r\\n&nbsp;&nbsp;//登录成功加载效果也消失\\r\\n&nbsp;&nbsp;loading.value = false\\r\\n } catch (error) {\\r\\n&nbsp;&nbsp;//登录失败加载效果消息\\r\\n&nbsp;&nbsp;loading.value = false\\r\\n&nbsp;&nbsp;//登录失败的提示信息\\r\\n&nbsp;&nbsp;ElNotification({\\r\\n&nbsp;&nbsp;&nbsp;type: \'error\',\\r\\n&nbsp;&nbsp;&nbsp;message: (error as Error).message,\\r\\n&nbsp;})\\r\\n }\\r\\n}\\r\\n</pre><h3>2、定义pinia仓库</h3><h4>首先需要对外暴露pinia</h4><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//仓库大仓库\\r\\nimport { createPinia } from \'pinia\'\\r\\n//创建大仓库\\r\\nconst pinia = createPinia()\\r\\n//对外暴露：入口文件需要安装仓库\\r\\nexport default pinia\\r\\n​\\r\\n</pre><h4>main.ts导入对外暴露的pinia</h4><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">import pinia from \'./store\'\\r\\napp.use(pinia)\\r\\n</pre><h4>定义user.ts小仓库</h4><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//创建用户相关的小仓库\\r\\nimport { defineStore } from \'pinia\'\\r\\n//引入接口\\r\\nimport { reqLogin, reqUserInfo, reqLogout } from \'@/api/user\'//导入api\\r\\nimport type {\\r\\n&nbsp;loginFormData,\\r\\n&nbsp;loginResponseData,\\r\\n&nbsp;userInfoReponseData,\\r\\n} from \'@/api/user/type\' //这边对数据类型进行定义\\r\\nimport type { UserState } from \'./types/type\'\\r\\n//引入操作本地存储的工具方法\\r\\nimport { SET_TOKEN, GET_TOKEN, REMOVE_TOKEN } from \'@/utils/token\' //这边的token均为本地存储localStorage\\r\\n//引入路由(常量路由)\\r\\nimport { constantRoute } from \'@/router/routes\'\\r\\n​\\r\\n//引入深拷贝方法\\r\\n//创建用户小仓库\\r\\nconst useUserStore = defineStore(\'User\', {\\r\\n&nbsp;//小仓库存储数据地方\\r\\n&nbsp;state: (): UserState =&gt; {\\r\\n&nbsp;&nbsp;return {\\r\\n&nbsp;&nbsp;&nbsp;token: GET_TOKEN(), //用户唯一标识token\\r\\n&nbsp;&nbsp;&nbsp;menuRoutes: constantRoute, //仓库存储生成菜单需要数组(路由)\\r\\n&nbsp;&nbsp;&nbsp;username: \'\',\\r\\n&nbsp;&nbsp;&nbsp;avatar: \'\',\\r\\n&nbsp;&nbsp;&nbsp;//存储当前用户是否包含某一个按钮\\r\\n&nbsp;&nbsp;&nbsp;buttons: [],\\r\\n&nbsp;}\\r\\n },\\r\\n&nbsp;//异步|逻辑的地方\\r\\n&nbsp;actions: {\\r\\n&nbsp;&nbsp;//用户登录的方法\\r\\n&nbsp;&nbsp;async userLogin(data: loginFormData) {\\r\\n&nbsp;&nbsp;&nbsp;//登录请求\\r\\n&nbsp;&nbsp;&nbsp;const result: loginResponseData = await reqLogin(data)\\r\\n&nbsp;&nbsp;&nbsp;//登录请求:成功200-&gt;token\\r\\n&nbsp;&nbsp;&nbsp;//登录请求:失败201-&gt;登录失败错误的信息\\r\\n&nbsp;&nbsp;&nbsp;if (result.code == 200) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//pinia仓库存储一下token\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//由于pinia|vuex存储数据其实利用js对象\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.token = result.data as string\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//本地存储持久化存储一份\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;SET_TOKEN(result.data as string)\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//能保证当前async函数返回一个成功的promise\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return \'ok\'\\r\\n&nbsp;&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return Promise.reject(new Error(result.data))\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;},\\r\\n&nbsp;&nbsp;//获取用户信息方法\\r\\n&nbsp;&nbsp;async userInfo() {\\r\\n&nbsp;&nbsp;&nbsp;//获取用户信息进行存储仓库当中[用户头像、名字]\\r\\n&nbsp;&nbsp;&nbsp;const result: userInfoReponseData = await reqUserInfo()\\r\\n&nbsp;&nbsp;&nbsp;//如果获取用户信息成功，存储一下用户信息\\r\\n&nbsp;&nbsp;&nbsp;if (result.code == 200) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.username = result.data.name\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.avatar = result.data.avatar\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.buttons = result.data.buttons\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//目前路由器管理的只有常量路由:用户计算完毕异步路由、任意路由动态追加\\r\\n​\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return \'ok\'\\r\\n&nbsp;&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return Promise.reject(new Error(result.message))\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;},\\r\\n&nbsp;&nbsp;//退出登录\\r\\n&nbsp;&nbsp;async userLogout() {\\r\\n&nbsp;&nbsp;&nbsp;//退出登录请求\\r\\n&nbsp;&nbsp;&nbsp;const result: any = await reqLogout()\\r\\n&nbsp;&nbsp;&nbsp;if (result.code == 200) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//目前没有mock接口:退出登录接口(通知服务器本地用户唯一标识失效)\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.token = \'\'\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.username = \'\'\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.avatar = \'\'\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;REMOVE_TOKEN()\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return \'ok\'\\r\\n&nbsp;&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return Promise.reject(new Error(result.message))\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;},\\r\\n },\\r\\n&nbsp;getters: {},\\r\\n})\\r\\n//对外暴露获取小仓库方法\\r\\nexport default useUserStore\\r\\n</pre><p>登录规则的定义，el-form表单中采用规则</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">&nbsp;&nbsp;&nbsp;&nbsp;&lt;el-form\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=\\"login_form\\"\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:model=\\"loginForm\\"\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:rules=\\"rules\\"\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ref=\\"loginForms\\"\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&gt;\\r\\n</pre><p>定义规则</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//定义表单校验需要配置对象\\r\\nconst rules = {\\r\\n&nbsp;//规则对象属性:\\r\\n&nbsp;//required,代表这个字段务必要校验的\\r\\n&nbsp;//min:文本长度至少多少位\\r\\n&nbsp;//max:文本长度最多多少位\\r\\n&nbsp;//message:错误的提示信息\\r\\n&nbsp;//trigger:触发校验表单的时机 change-&gt;文本发生变化触发校验,blur:失去焦点的时候触发校验规则\\r\\n&nbsp;username: [\\r\\n&nbsp;&nbsp;// { required: true, min: 6, max: 10, message: \'账号长度至少六位\', trigger: \'change\' }\\r\\n&nbsp;{ trigger: \'change\', validator: validatorUserName },\\r\\n ],\\r\\n&nbsp;password: [\\r\\n&nbsp;&nbsp;// { required: true, min: 6, max: 15, message: \'密码长度至少6位\', trigger: \'change\' }\\r\\n&nbsp;{ trigger: \'change\', validator: validatorPassword },\\r\\n ],\\r\\n}\\r\\n</pre><p>规则为自定义函数：</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//自定义校验规则函数\\r\\nconst validatorUserName = (rule: any, value: any, callback: any) =&gt; {\\r\\n&nbsp;//rule:即为校验规则对象\\r\\n&nbsp;//value:即为表单元素文本内容\\r\\n&nbsp;//函数:如果符合条件callBack放行通过即为\\r\\n&nbsp;//如果不符合条件callBack方法,注入错误提示信息\\r\\n&nbsp;if (value.length &gt;= 5) {\\r\\n&nbsp;&nbsp;callback()\\r\\n } else {\\r\\n&nbsp;&nbsp;callback(new Error(\'账号长度至少五位\'))\\r\\n }\\r\\n}\\r\\n​\\r\\nconst validatorPassword = (rule: any, value: any, callback: any) =&gt; {\\r\\n&nbsp;if (value.length &gt;= 6) {\\r\\n&nbsp;&nbsp;callback()\\r\\n } else {\\r\\n&nbsp;&nbsp;callback(new Error(\'密码长度至少六位\'))\\r\\n }\\r\\n}\\r\\n</pre><p><br></p>","cover_img":"/uploads/24e190cc0b6fdeef0c1576d2e3111723.jpg","pub_date":"Thu Jul 13 2023 22:43:19 GMT+0800 (Coordinated Universal Time)","state":"已发布","cate_id":44889,"author_id":98077,"cate_name":"前端学习","username":"78798","nickname":""},{"id":7537,"title":"路由鉴权","content":"<pre class=\\"ql-syntax\\" spellcheck=\\"false\\">title: 路由鉴权\\r\\ncategory: 前端学习\\r\\nabbrlink: 21883\\r\\ndate: 2023-05-25 18:31:01\\r\\n</pre><h3>路由鉴权</h3><p>路由鉴权:鉴权,项目当中路由能不能被的权限的设置(某一个路由什么条件下可以访问、什么条件下不可以访问)</p><p>主要是设置路由守卫</p><p>在src目录下构建permisstion.ts文件</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">import router from \'@/router\'\\r\\nimport setting from \'./setting\'//用来更新title\\r\\n//@ts-expect-error\\r\\nimport nprogress from \'nprogress\'\\r\\n//引入进度条样式\\r\\nimport \'nprogress/nprogress.css\'\\r\\nnprogress.configure({ showSpinner: false })\\r\\n//获取用户相关的小仓库内部token数据,去判断用户是否登录成功\\r\\nimport useUserStore from \'./store/modules/user\'\\r\\nimport pinia from \'./store\'\\r\\nconst userStore = useUserStore(pinia)\\r\\n//全局守卫:项目当中任意路由切换都会触发的钩子\\r\\n//全局前置守卫\\r\\nrouter.beforeEach(async (to: any, from: any, next: any) =&gt; {\\r\\n&nbsp;document.title = `${setting.title} - ${to.meta.title}`\\r\\n&nbsp;//to:你将要访问那个路由\\r\\n&nbsp;//from:你从来个路由而来\\r\\n&nbsp;//next:路由的放行函数\\r\\n&nbsp;nprogress.start()\\r\\n&nbsp;//获取token,去判断用户登录、还是未登录\\r\\n&nbsp;const token = userStore.token\\r\\n&nbsp;//获取用户名字\\r\\n&nbsp;const username = userStore.username\\r\\n&nbsp;//用户登录判断\\r\\n&nbsp;if (token) {\\r\\n&nbsp;&nbsp;//登录成功,访问login,不能访问,指向首页\\r\\n&nbsp;&nbsp;if (to.path == \'/login\') {\\r\\n&nbsp;&nbsp;&nbsp;next({ path: \'/\' })\\r\\n&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;//登录成功访问其余六个路由(登录排除)\\r\\n&nbsp;&nbsp;&nbsp;//有用户信息\\r\\n&nbsp;&nbsp;&nbsp;if (username) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//放行\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;next()\\r\\n&nbsp;&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//如果没有用户信息,在守卫这里发请求获取到了用户信息再放行\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;try {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取用户信息\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await userStore.userInfo()\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//放行\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//万一:刷新的时候是异步路由,有可能获取到用户信息、异步路由还没有加载完毕,出现空白的效果\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next({ ...to })\\r\\n&nbsp;&nbsp;&nbsp;} catch (error) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//token过期:获取不到用户信息了\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//用户手动修改本地存储token\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//退出登录-&gt;用户相关的数据清空\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;await userStore.userLogout()\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next({ path: \'/login\', query: { redirect: to.path } })\\r\\n&nbsp;&nbsp;&nbsp;}\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;}\\r\\n } else {\\r\\n&nbsp;&nbsp;//用户未登录判断\\r\\n&nbsp;&nbsp;if (to.path == \'/login\') {\\r\\n&nbsp;&nbsp;&nbsp;next()\\r\\n&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;next({ path: \'/login\', query: { redirect: to.path } })\\r\\n&nbsp;}\\r\\n }\\r\\n})\\r\\n//全局后置守卫\\r\\nrouter.afterEach((to: any, from: any) =&gt; {\\r\\n&nbsp;nprogress.done()\\r\\n})\\r\\n​\\r\\n</pre><h3>mock更改为真实接口</h3><p>在vite.config.ts中进行设置</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//代理跨域\\r\\n&nbsp;&nbsp;server: {\\r\\n&nbsp;&nbsp;&nbsp;proxy: {\\r\\n&nbsp;&nbsp;&nbsp;[env.VITE_APP_BASE_API]: {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//获取数据的服务器地址设置\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: env.VITE_SERVE,\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//需要代理跨域\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeOrigin: true,\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//路径重写\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rewrite: (path) =&gt; path.replace(/^\\\\/api/, \'\'),\\r\\n&nbsp;&nbsp;&nbsp;},\\r\\n&nbsp;&nbsp;},\\r\\n&nbsp;},\\r\\n</pre><p>重新设置user.api</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//统一管理咱们项目用户相关的接口\\r\\nimport request from \'@/utils/request\'\\r\\nimport type {\\r\\n&nbsp;loginFormData,\\r\\n&nbsp;loginResponseData,\\r\\n&nbsp;userInfoReponseData,\\r\\n} from \'./type\'\\r\\n//项目用户相关的请求地址\\r\\nenum API {\\r\\n&nbsp;LOGIN_URL = \'/admin/acl/index/login\',\\r\\n&nbsp;USERINFO_URL = \'/admin/acl/index/info\',\\r\\n&nbsp;LOGOUT_URL = \'/admin/acl/index/logout\',\\r\\n}\\r\\n​\\r\\n//登录接口\\r\\nexport const reqLogin = (data: loginFormData) =&gt;\\r\\n&nbsp;request.post&lt;any, loginResponseData&gt;(API.LOGIN_URL, data)\\r\\n//获取用户信息\\r\\nexport const reqUserInfo = () =&gt;\\r\\n&nbsp;request.get&lt;any, userInfoReponseData&gt;(API.USERINFO_URL)\\r\\n//退出登录\\r\\nexport const reqLogout = () =&gt; request.post&lt;any, any&gt;(API.LOGOUT_URL)\\r\\n​\\r\\n</pre><p><br></p>","cover_img":"/uploads/43172a66d8e7b4103a8830f229e7d83c.jpg","pub_date":"Thu Jul 13 2023 22:43:44 GMT+0800 (Coordinated Universal Time)","state":"已发布","cate_id":44889,"author_id":98077,"cate_name":"前端学习","username":"78798","nickname":""},{"id":7538,"title":"token追踪","content":"<pre class=\\"ql-syntax\\" spellcheck=\\"false\\">title: token追踪\\r\\nabbrlink: 18506\\r\\ndate: 2023-05-24 20:38:03\\r\\ncategory: 前端学习\\r\\n</pre><p>首先我们想要尝试在页面上展示我们的个人头像与个人名称，我们需要根据我们login所存储的本地token采用请求响应器在头部加上token。</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">request.interceptors.request.use((config) =&gt; {\\r\\n&nbsp;//获取用户相关的小仓库:获取仓库内部token,登录成功以后携带给服务器\\r\\n&nbsp;const userStore = useUserStore()//调用我们的小仓库 获取小仓库里面的数据\\r\\n&nbsp;if (userStore.token) { //如果locolstorage中存储了token数据\\r\\n&nbsp;&nbsp;config.headers.token = userStore.token\\r\\n }\\r\\n&nbsp;//config配置对象,headers属性请求头,经常给服务器端携带公共参数\\r\\n&nbsp;//返回配置对象\\r\\n&nbsp;return config\\r\\n})\\r\\n</pre><p><span class=\\"ql-font-monospace\\"><img src=\\"//:0\\" alt=\\"image-20220916103141323\\"></span></p><p>在组件挂载中调用仓库action函数获取user信息其中userInfo信息获取定义如下：</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">//获取用户信息方法\\r\\n&nbsp;&nbsp;async userInfo() {\\r\\n&nbsp;&nbsp;&nbsp;//获取用户信息进行存储仓库当中[用户头像、名字]\\r\\n&nbsp;&nbsp;&nbsp;const result: userInfoReponseData = await reqUserInfo()\\r\\n​\\r\\n&nbsp;&nbsp;&nbsp;//如果获取用户信息成功，存储一下用户信息\\r\\n&nbsp;&nbsp;&nbsp;if (result.code == 200) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.username = result.data.checkUser.name//这边运行出现过错误\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.avatar = result.data.checkUser.avatar\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;this.buttons = result.data.checkUser.buttons\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;//目前路由器管理的只有常量路由:用户计算完毕异步路由、任意路由动态追加\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(\'ddd\', result.data.checkUser)\\r\\n​\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return \'ok\'\\r\\n&nbsp;&nbsp;} else {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return Promise.reject(new Error(result.message))\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;},\\r\\n</pre><p>其中API，reqUserInfo定义如下：</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\">export const reqUserInfo = () =&gt;\\r\\n&nbsp;request.get&lt;any, userInfoReponseData&gt;(API.USERINFO_URL)\\r\\n</pre><p>其中mock定义如下：</p><pre class=\\"ql-syntax\\" spellcheck=\\"false\\"> // 获取用户信息\\r\\n {\\r\\n&nbsp;&nbsp;url: \'/api/user/info\',\\r\\n&nbsp;&nbsp;method: \'get\',\\r\\n&nbsp;&nbsp;response: (request) =&gt; {\\r\\n&nbsp;&nbsp;&nbsp;//获取请求头携带token\\r\\n&nbsp;&nbsp;&nbsp;const token = request.headers.token\\r\\n&nbsp;&nbsp;&nbsp;//查看用户信息是否包含有次token用户\\r\\n&nbsp;&nbsp;&nbsp;const checkUser = createUserList().find((item) =&gt; item.token === token)\\r\\n&nbsp;&nbsp;&nbsp;console.log(\'mmm\', checkUser)\\r\\n&nbsp;&nbsp;&nbsp;//没有返回失败的信息\\r\\n&nbsp;&nbsp;&nbsp;if (!checkUser) {\\r\\n&nbsp;&nbsp;&nbsp;&nbsp;return { code: 201, data: { message: \'获取用户信息失败\' } }\\r\\n&nbsp;&nbsp;}\\r\\n&nbsp;&nbsp;&nbsp;//如果有返回成功信息\\r\\n&nbsp;&nbsp;&nbsp;return { code: 200, data: { checkUser } }\\r\\n&nbsp;},\\r\\n },\\r\\n</pre><p>最终主页面显示如下：</p><p><span class=\\"ql-font-monospace\\"><img src=\\"//:0\\" alt=\\"image-20220916103141323\\"></span></p><p><br></p><p><br></p>","cover_img":"/uploads/840c597cd4c6caf643df28bf7e1ee610.jpg","pub_date":"Thu Jul 13 2023 22:44:27 GMT+0800 (Coordinated Universal Time)","state":"已发布","cate_id":44889,"author_id":98077,"cate_name":"前端学习","username":"78798","nickname":""},{"id":7539,"title":"GPT-2","content":"<pre class=\\"ql-syntax\\" spellcheck=\\"false\\">title: GPT-2\\r\\ncategory: NLP\\r\\nabbrlink: 23160\\r\\ndate: 2023-05-16 16:03:31\\r\\n</pre><h2>GPT-2：多任务学习</h2><p>GPT-2继续沿用了原来在GPT中使用的单向 Transformer 模型，而这篇文章的目的就是尽可能利用单向Transformer的优势，做一些BERT使用的双向Transformer所做不到的事。那就是通过上文生成下文文本。</p><h3>GPT-2的改进</h3><p><strong>1. 去掉了fine-tuning层：</strong>不再针对不同任务分别进行微调建模，而是不定义这个模型应该做什么任务，模型会自动识别出来需要做什么任务，是很通用的设计。</p><p><strong>2. 增加数据集：</strong>GPT-2手机了更加广泛，数量更多的语料组成数据集。该数据集包含800万个网页，大小为40G。这些数据是经过过滤后得到的高质量文本。</p><p><strong>3. 增加网络参数：</strong>GPT-2将Transformer堆叠的层数增加到48层，隐层的维度为1600，参数量达到了15亿。（5倍于BERT的参数量）</p><p><strong>4. 调整Transformer：</strong>将layer normalization放到每个sub-block之前，并在最后一个self-attention后再增加一个layer normalization</p><p>\\t此外，GPT-2将词汇表数量增加到50257个；最大的上下文大小从GPT-1的512提升到了1024 tokens；batch-size增加到512.</p><h3>模型参数</h3><ul><li>同样使用了使用字节对编码构建字典，字典的大小：50257</li><li>滑动窗口大小：1024</li><li>batch-size：512</li><li>Layer Normalization移动到了每一块的输入部分，在每个self-attention之后额外添加了一个Layer Normalization</li><li>将残差层的初始化值用<span class=\\"ql-font-monospace\\"><img src=\\"//:0\\" alt=\\"image-20221011152741329\\"></span>进行缩放，其中N是残差层的个数</li></ul><p>GPT-2训练了4组不同的层数和词向量的长度的模型，见表：</p><p>参数量层数词向量长度117M（GPT-1）12768345M1241024762M3612801542M481600</p><p>效果如下：</p><p><span class=\\"ql-font-monospace\\"><img src=\\"https://img-blog.csdnimg.cn/e9e320899c9e430c999f83d51c9f748c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAeXdtX3Vw,size_20,color_FFFFFF,t_70,g_se,x_16\\" alt=\\"请添加图片描述\\"></span></p><p>可以看出随着模型的增大，模型的效果是不断提升的。模型仍欠拟合，后续还会加大数据量，做大做强。</p><h3>GPT-2能够适应多任务</h3><p>在训练的时候，采用了多任务的方式，不单单只在一个任务上进行学习，而是多个，每一个任务都要保证其损失函数能收敛，不同任务是共享主题Transformer参数的，进一步提升模型的泛化能力，因此在即使没有fine-tuning的情况下，依旧有非常不错的表现。</p><p>在fine-tuning有监督任务阶段，GPT-2根据给定输入与任务来做出相应的输出，那么模型就可以表示成下面这个样子：</p><p>                                                                               <span class=\\"ql-font-monospace\\"><img src=\\"//:0\\" alt=\\"image-20221011131653847\\"></span></p><p>例如可以直接输入：(“自然语言处理”, 中文翻译)来得到我们需要的结果(“Nature Language Processing”)，因此提出的模型可以将机器翻译，自然语言推理，语义分析，关系提取等10类任务统一建模为一个分类任务，而不误再为每一个子任务单独设计一个模型。</p>","cover_img":"/uploads/761a9b64dfe95a091c89885422373639.jpg","pub_date":"Thu Jul 13 2023 22:45:11 GMT+0800 (Coordinated Universal Time)","state":"已发布","cate_id":44891,"author_id":98077,"cate_name":"NLP","username":"78798","nickname":""}]'),f=JSON.parse('[{"id":7534,"title":"vue3组件通信方式","pub_date":"Thu Jul 11 2023 22:42:34 GMT+0800 (Coordinated Universal Time)","state":"已发布","cateid":"44889","cate_name":"前端学习"},{"id":7536,"title":"采用pinia登录总结","pub_date":"Thu Jul 11 2023 22:43:19 GMT+0800 (Coordinated Universal Time)","state":"已发布","cateid":"44889","cate_name":"前端学习"},{"id":7537,"title":"路由鉴权","pub_date":"Thu Jul 12 2023 22:43:44 GMT+0800 (Coordinated Universal Time)","state":"已发布","cateid":"44889","cate_name":"前端学习"},{"id":7538,"title":"token追踪","pub_date":"Thu Jul 12 2023 22:44:27 GMT+0800 (Coordinated Universal Time)","state":"已发布","cateid":"44889","cate_name":"前端学习"},{"id":7539,"title":"GPT-2","pub_date":"Thu Jul 13 2023 22:45:11 GMT+0800 (Coordinated Universal Time)","state":"已发布","cateid":"44891","cate_name":"NLP"}]');const h={code:0,message:"获取左侧菜单成功！",data:[{indexPath:"/home",title:"首页",icon:"el-icon-s-home",children:null},{indexPath:"2",title:"文章管理",icon:"el-icon-s-order",children:[{indexPath:"/art-cate",title:"文章分类",icon:"el-icon-s-data"},{indexPath:"/art-list",title:"文章列表",icon:"el-icon-document-copy"}]},{indexPath:"3",title:"个人中心",icon:"el-icon-user-solid",children:[{indexPath:"/user-info",title:"基本资料",icon:"el-icon-s-operation"},{indexPath:"/user-avatar",title:"更换头像",icon:"el-icon-camera"},{indexPath:"/user-pwd",title:"重置密码",icon:"el-icon-key"}]}]};g().mock("/api/login","post",(n=>{let e=[{username:"aaabbb7891",password:"123456",repassword:"123456",token:"aaa",id:230},{username:"78798",password:"123456",repassword:"123456",token:"bbb",id:240}],t=[{id:230,username:"aaabbb7891",nickname:"",email:"",token:"aaa",user_pic:null},{id:240,username:"78798",nickname:"",email:"",token:"bbb",user_pic:null}];null===window.localStorage.getItem("user")&&(window.localStorage.setItem("user",JSON.stringify(e)),window.localStorage.setItem("userinfo",JSON.stringify(t))),e=JSON.parse(window.localStorage.getItem("user")),t=JSON.parse(window.localStorage.getItem("userinfo"));const r=JSON.parse(n.body),s=r.username,p=r.password,a=e.find((n=>n.username===s&&n.password===p));return a?(null===window.localStorage.getItem("res")&&(window.localStorage.setItem("res",JSON.stringify(m)),window.localStorage.setItem("article",JSON.stringify(f))),window.localStorage.setItem("token",JSON.stringify(a.token)),{code:0,message:"登录成功！",token:a.token}):{code:201,data:{message:"账号或者密码不正确"}}})),g().mock("/api/reg","post",(n=>{null===window.localStorage.getItem("user")&&(window.localStorage.setItem("user",JSON.stringify(t)),window.localStorage.setItem("userinfo",JSON.stringify(e)));const e=JSON.parse(window.localStorage.getItem("userinfo")),t=JSON.parse(window.localStorage.getItem("user")),r=JSON.parse(n.body),s=r.username,p=t.find((n=>n.username===s)),a=t.length;let o=String.fromCharCode(t[a-1].token.charAt(0).charCodeAt()+1);o=o.concat(o).concat(o);const l=t[a-1].id+10,i={username:r.username,password:r.password,repassword:r.repassword,token:o,id:l},c={id:l,username:r.username,nickname:"",email:"",token:o,user_pic:null};return p?{code:1,message:"用户名被占用，请更换其他用户名！"}:(e.push(c),t.push(i),window.localStorage.setItem("user",JSON.stringify(t)),window.localStorage.setItem("userinfo",JSON.stringify(e)),{code:0,message:"注册成功！"})})),g().mock("/my/userinfo","patch",(n=>{const e=JSON.parse(n.body),t=e.token.replaceAll('"',""),r=JSON.parse(window.localStorage.getItem("userinfo"));let s=0;return r.forEach(((n,e,r)=>{n.token===t&&(s=e)})),{code:0,message:"获取个人信息！",data:r[s]}})),g().mock("/my/userinfo","post",(n=>{const e=JSON.parse(n.body),t=JSON.parse(window.localStorage.getItem("userinfo"));let r=0;return t.forEach(((n,t,s)=>{n.id===e.id&&(r=t)})),t[r].email=e.email,t[r].nickname=e.nickname,window.localStorage.setItem("userinfo",JSON.stringify(t)),{code:0,message:"修改个人信息成功！"}})),g().mock("/my/updatepwd","post",(n=>{const e=JSON.parse(window.localStorage.getItem("user")),t=JSON.parse(n.body),r=t.token.replaceAll('"',"");let s=0;return e.forEach(((n,e,t)=>{n.token===r&&(s=e)})),e[s].password!==t.old_pwd?{code:200,message:"原密码错误！"}:(e[s].password=t.new_pwd,e[s].repassword=t.re_pwd,window.localStorage.setItem("user",JSON.stringify(e)),{code:0,message:"修改个人信息成功！"})})),g().mock("/my/update/avatar","patch",(n=>{const e=JSON.parse(window.localStorage.getItem("userinfo")),t=JSON.parse(n.body),r=t.token;let s=0;return e.forEach(((n,e,t)=>{n.token===r&&(s=e)})),e[s].avatar=t.avatar,e[s].user_pic=t.avatar,window.localStorage.setItem("userinfo",JSON.stringify(e)),{code:0,message:"修改头像成功！"}})),g().mock("/my/menus",(()=>h)),g().mock("/my/cate/list",(()=>{let n=[{id:44889,cate_name:"前端学习",cate_alias:"qianduan"},{id:44891,cate_name:"NLP",cate_alias:"NLP"}];null===window.localStorage.getItem("catelist")&&window.localStorage.setItem("catelist",JSON.stringify(n)),n=JSON.parse(window.localStorage.getItem("catelist"));const e={code:0,message:"获取文章分类列表成功！",data:n};return e})),g().mock("/my/cate/add","post",(n=>{const e=JSON.parse(window.localStorage.getItem("catelist")),t=JSON.parse(n.body),r=e.length,s=e[r-1].id+2,p={id:s,cate_name:t.cate_name,cate_alias:t.cate_alias};return e.push(p),window.localStorage.setItem("catelist",JSON.stringify(e)),{code:0,message:"新增文章分类成功！"}})),g().mock("/my/cate/del","delete",(n=>{const e=JSON.parse(window.localStorage.getItem("catelist")),t=JSON.parse(n.body);let r=0;return e.forEach(((n,e,s)=>{n.id===t.id&&(r=e)})),e.splice(r,1),window.localStorage.setItem("catelist",JSON.stringify(e)),{code:0,message:"删除文章分类成功！"}})),g().mock("/my/cate/info","put",(n=>{const e=JSON.parse(window.localStorage.getItem("catelist")),t=JSON.parse(n.body);let r=0;return e.forEach(((n,e,s)=>{n.id===t.id&&(r=e)})),e[r].cate_name=t.cate_name,e[r].cate_alias=t.cate_alias,window.localStorage.setItem("catelist",JSON.stringify(e)),{code:0,message:"修改文章分类成功！"}})),g().mock("/my/article/list","post",(n=>{const e=JSON.parse(window.localStorage.getItem("article")),t=JSON.parse(n.body),r=t.cate_id;if(console.log("aaaa",e),!r)return{code:0,message:"获取文章列表成功！",total:e.length,data:e};console.log("aaaa",e);const s=e.filter((n=>-1!==String(n.cateid).indexOf(String(r))));return s?(console.log(s),{code:0,message:"获取文章列表成功！",total:e.length,data:s}):{code:201,data:{message:"未分类"}}})),g().mock("/my/article/info",(n=>{const e=JSON.parse(n.body),t=e.id;let r=[];const s=JSON.parse(window.localStorage.getItem("res"));return r=s.filter(((n,e,r)=>n.id===t)),{code:0,message:"请求文章详情成功！",data:r[0]}})),g().mock("/my/article/add","post",(n=>{const e=JSON.parse(window.localStorage.getItem("article")),t=JSON.parse(window.localStorage.getItem("catelist")),r=n.body,s=r.get("title"),p=r.get("content"),a=r.get("cover_img"),o=r.get("state"),l=r.get("cate_id"),i=JSON.parse(window.localStorage.getItem("res")),c=e.length,d=e[c-1].id+1,u={id:d,title:s,content:p,cover_img:a,state:o,cate_id:l};i.push(u),window.localStorage.setItem("res",JSON.stringify(i));const b=new Date;let g=0;t.forEach(((n,e,t)=>{String(n.id)===l&&(g=e)}));const m=t[g].cate_name,f={id:d,title:s,pub_date:b,state:o,cateid:l,cate_name:m};return e.push(f),window.localStorage.setItem("article",JSON.stringify(e)),{code:0,message:"添加文章详情成功！"}})),g().mock("/my/article/info","delete",(n=>{const e=JSON.parse(window.localStorage.getItem("article")),t=JSON.parse(n.body);let r=0,s=0;e.forEach(((n,e,s)=>{n.id===t.id&&(r=e)})),e.splice(r,1);const p=JSON.parse(window.localStorage.getItem("res"));return p.forEach(((n,e,r)=>{n.id===t.id&&(s=e)})),p.splice(s,1),window.localStorage.setItem("res",JSON.stringify(p)),window.localStorage.setItem("article",JSON.stringify(e)),{code:0,message:"删除文章分类成功！"}}));var y=t(2402),v=t.n(y);r["default"].use(v());var k=t(7318),w=t.n(k),S=t(2053),x=t.n(S),_=function(){var n=this,e=n._self._c;return e("el-row",[e("el-col",{attrs:{span:24}},[e("div",{staticClass:"grid-content bg-purple-light"},[n._t("default",(function(){return[n._v(" 默认 ")]}))],2)])],1)},N=[],T={name:"HelloWorld"},O=T,I=(0,l.Z)(O,_,N,!1,null,null,null),q=I.exports,E=function(){var n=this,e=n._self._c;return e("div",[e("carousel-3d",{ref:"carousel",attrs:{autoplay:!0,autoplayTimeout:3e3,perspective:30,inverseScaling:500,space:"400",loop:!0,width:"360",height:"240",mousedown:"true",dir:"ltr"},on:{"before-slide-change":n.onSlideChange}},n._l(n.Lists,(function(n,t){return e("slide",{key:t,attrs:{index:t}},[[e("img",{attrs:{src:n.imgUrl}})]],2)})),1)],1)},P=[],C=t(143),J=t.n(C),U={components:{Carousel3d:C.Carousel3d,Slide:C.Slide},data(){return{Lists:[{title:"parent",slide:23424234234234,imgUrl:"./1 (1).jpg"},{title:"parent",slide:23424234234234,imgUrl:"./1 (2).jpg"},{title:"parent",slide:23424234234234,imgUrl:"./1 (3).jpg"},{title:"parent",slide:23424234234234,imgUrl:"./1 (4).jpg"},{title:"parent",slide:23424234234234,imgUrl:"./1 (5).jpg"},{title:"parent",slide:23424234234234,imgUrl:"./1 (6).jpg"}]}},methods:{onSlideChange(n){console.log(this.$refs.carousel,"xxx"),this.carouselIndex=n},goSlideIndex(n){n>this.Lists.length-1||this.Lists.length-1<0||this.$refs.carousel.goFar(n)}}},L=U,$=(0,l.Z)(L,E,P,!1,null,"18b5e269",null),M=$.exports,j={install(n,e){n.component("ddd",M)}};r["default"].use(J()),r["default"].use(w()),r["default"].use(q),r["default"].use(j),r["default"].config.productionTip=!1,r["default"].prototype.$formatDate=n=>x()(n).format("YYYY-MM-DD HH:mm:ss"),r["default"].prototype.$formatDate11=n=>x()(n).format("YYYY-MM-DD"),new r["default"]({router:d.Z,store:u.Z,render:n=>n(c)}).$mount("#app")},510:function(n,e,t){var r=t(1508),s=t(8842),p=t(5011);r["default"].use(s.ZP);const a=[{path:"/reg",component:()=>t.e(804).then(t.bind(t,5804))},{path:"/login",component:()=>t.e(427).then(t.bind(t,9427))},{path:"/",component:()=>t.e(357).then(t.bind(t,9357)),redirect:"/home",children:[{path:"home",component:()=>t.e(560).then(t.bind(t,9560))},{path:"user-info",meta:{title:"基本资料"},component:()=>t.e(876).then(t.bind(t,7876))},{path:"user-avatar",meta:{title:"更换头像"},component:()=>t.e(883).then(t.bind(t,1883))},{path:"user-pwd",meta:{title:"重置密码"},component:()=>t.e(530).then(t.bind(t,2530))},{path:"art-cate",meta:{title:"文章分类"},component:()=>t.e(671).then(t.bind(t,8671))},{path:"art-list",meta:{title:"文章列表"},component:()=>t.e(829).then(t.bind(t,4829))}]}],o=new s.ZP({base:"",routes:a}),l=["/login","/reg"];o.beforeEach(((n,e,t)=>{const r=p.Z.state.token;r?(p.Z.state.userInfo.username||p.Z.dispatch("initUserInfo"),t()):l.includes(n.path)?t():t("/login")})),e.Z=o},5011:function(n,e,t){t(3705);var r=t(1508),s=t(8836),p=t(4951),a=t(9469);r["default"].use(s.ZP),e.Z=new s.ZP.Store({state:{token:"",userInfo:{},tabList:[{indexPath:"/",title:"首页"}]},getters:{nickname:n=>n.userInfo.nickname,username:n=>n.userInfo.username,user_pic:n=>n.userInfo.user_pic},mutations:{updateToken(n,e){n.token=e},updateUserInfo(n,e){n.userInfo=e},SELECTMENU(n,e){if("home"!==e.name){const t=n.tabList.findIndex((n=>n.title===e.title));-1===t&&n.tabList.push(e)}}},actions:{async initUserInfo(n){console.log("mmm",localStorage.getItem("token"));const{data:e}=await(0,a.Zf)({token:localStorage.getItem("token")});0===e.code&&n.commit("updateUserInfo",e.data)}},plugins:[(0,p.Z)()]})},3918:function(n,e,t){t.d(e,{v:function(){return a}});t(3705);var r=t(3669),s=t(5011),p=t(510);const a="",o=r.Z.create({baseURL:""});e.Z=o,o.interceptors.request.use((function(n){return n.headers.Authorization=localStorage.getItem("token"),console.log("config",n),n}),(function(n){return Promise.reject(n)})),o.interceptors.response.use((function(n){return console.log("response",n),n}),(function(n){return console.log("error",n),401===n.response.status&&(s.Z.commit("updateToken",""),p.Z.push("/login")),Promise.reject(n)}))}},e={};function t(r){var s=e[r];if(void 0!==s)return s.exports;var p=e[r]={id:r,loaded:!1,exports:{}};return n[r].call(p.exports,p,p.exports,t),p.loaded=!0,p.exports}t.m=n,function(){t.amdO={}}(),function(){var n=[];t.O=function(e,r,s,p){if(!r){var a=1/0;for(c=0;c<n.length;c++){r=n[c][0],s=n[c][1],p=n[c][2];for(var o=!0,l=0;l<r.length;l++)(!1&p||a>=p)&&Object.keys(t.O).every((function(n){return t.O[n](r[l])}))?r.splice(l--,1):(o=!1,p<a&&(a=p));if(o){n.splice(c--,1);var i=s();void 0!==i&&(e=i)}}return e}p=p||0;for(var c=n.length;c>0&&n[c-1][2]>p;c--)n[c]=n[c-1];n[c]=[r,s,p]}}(),function(){t.n=function(n){var e=n&&n.__esModule?function(){return n["default"]}:function(){return n};return t.d(e,{a:e}),e}}(),function(){t.d=function(n,e){for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})}}(),function(){t.f={},t.e=function(n){return Promise.all(Object.keys(t.f).reduce((function(e,r){return t.f[r](n,e),e}),[]))}}(),function(){t.u=function(n){return"js/"+n+"."+{357:"ec1b0cb4",427:"24869a33",530:"b9ddd310",560:"10c4faf2",671:"fa6831a8",804:"17f765d8",829:"1f630fd1",876:"f4994909",883:"db43f99f"}[n]+".js"}}(),function(){t.miniCssF=function(n){return"css/"+n+"."+{357:"2f2f9cfc",427:"cf4b49b2",530:"d01d0886",560:"72ee7652",671:"d74ce452",804:"563e9f40",829:"ba4325d0",876:"f3014ded",883:"5eaa10a5"}[n]+".css"}}(),function(){t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"===typeof window)return window}}()}(),function(){t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)}}(),function(){var n={},e="111:";t.l=function(r,s,p,a){if(n[r])n[r].push(s);else{var o,l;if(void 0!==p)for(var i=document.getElementsByTagName("script"),c=0;c<i.length;c++){var d=i[c];if(d.getAttribute("src")==r||d.getAttribute("data-webpack")==e+p){o=d;break}}o||(l=!0,o=document.createElement("script"),o.charset="utf-8",o.timeout=120,t.nc&&o.setAttribute("nonce",t.nc),o.setAttribute("data-webpack",e+p),o.src=r),n[r]=[s];var u=function(e,t){o.onerror=o.onload=null,clearTimeout(b);var s=n[r];if(delete n[r],o.parentNode&&o.parentNode.removeChild(o),s&&s.forEach((function(n){return n(t)})),e)return e(t)},b=setTimeout(u.bind(null,void 0,{type:"timeout",target:o}),12e4);o.onerror=u.bind(null,o.onerror),o.onload=u.bind(null,o.onload),l&&document.head.appendChild(o)}}}(),function(){t.r=function(n){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})}}(),function(){t.nmd=function(n){return n.paths=[],n.children||(n.children=[]),n}}(),function(){t.p=""}(),function(){if("undefined"!==typeof document){var n=function(n,e,t,r,s){var p=document.createElement("link");p.rel="stylesheet",p.type="text/css";var a=function(t){if(p.onerror=p.onload=null,"load"===t.type)r();else{var a=t&&("load"===t.type?"missing":t.type),o=t&&t.target&&t.target.href||e,l=new Error("Loading CSS chunk "+n+" failed.\n("+o+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=a,l.request=o,p.parentNode&&p.parentNode.removeChild(p),s(l)}};return p.onerror=p.onload=a,p.href=e,t?t.parentNode.insertBefore(p,t.nextSibling):document.head.appendChild(p),p},e=function(n,e){for(var t=document.getElementsByTagName("link"),r=0;r<t.length;r++){var s=t[r],p=s.getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(p===n||p===e))return s}var a=document.getElementsByTagName("style");for(r=0;r<a.length;r++){s=a[r],p=s.getAttribute("data-href");if(p===n||p===e)return s}},r=function(r){return new Promise((function(s,p){var a=t.miniCssF(r),o=t.p+a;if(e(a,o))return s();n(r,o,null,s,p)}))},s={143:0};t.f.miniCss=function(n,e){var t={357:1,427:1,530:1,560:1,671:1,804:1,829:1,876:1,883:1};s[n]?e.push(s[n]):0!==s[n]&&t[n]&&e.push(s[n]=r(n).then((function(){s[n]=0}),(function(e){throw delete s[n],e})))}}}(),function(){var n={143:0};t.f.j=function(e,r){var s=t.o(n,e)?n[e]:void 0;if(0!==s)if(s)r.push(s[2]);else{var p=new Promise((function(t,r){s=n[e]=[t,r]}));r.push(s[2]=p);var a=t.p+t.u(e),o=new Error,l=function(r){if(t.o(n,e)&&(s=n[e],0!==s&&(n[e]=void 0),s)){var p=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;o.message="Loading chunk "+e+" failed.\n("+p+": "+a+")",o.name="ChunkLoadError",o.type=p,o.request=a,s[1](o)}};t.l(a,l,"chunk-"+e,e)}},t.O.j=function(e){return 0===n[e]};var e=function(e,r){var s,p,a=r[0],o=r[1],l=r[2],i=0;if(a.some((function(e){return 0!==n[e]}))){for(s in o)t.o(o,s)&&(t.m[s]=o[s]);if(l)var c=l(t)}for(e&&e(r);i<a.length;i++)p=a[i],t.o(n,p)&&n[p]&&n[p][0](),n[p]=0;return t.O(c)},r=self["webpackChunk_111"]=self["webpackChunk_111"]||[];r.forEach(e.bind(null,0)),r.push=e.bind(null,r.push.bind(r))}();var r=t.O(void 0,[998],(function(){return t(9027)}));r=t.O(r)})();
//# sourceMappingURL=app.f33b4faa.js.map